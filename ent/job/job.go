// Code generated by ent, DO NOT EDIT.

package job

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the job type in the database.
	Label = "job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldQueueName holds the string denoting the queue_name field in the database.
	FieldQueueName = "queue_name"
	// FieldRefID holds the string denoting the ref_id field in the database.
	FieldRefID = "ref_id"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldRetryTimes holds the string denoting the retry_times field in the database.
	FieldRetryTimes = "retry_times"
	// FieldBody holds the string denoting the body field in the database.
	FieldBody = "body"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// FieldScheduledAt holds the string denoting the scheduled_at field in the database.
	FieldScheduledAt = "scheduled_at"
	// FieldFinishedAt holds the string denoting the finished_at field in the database.
	FieldFinishedAt = "finished_at"
	// Table holds the table name of the job in the database.
	Table = "sssq_scheduled_jobs"
)

// Columns holds all SQL columns for job fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldQueueName,
	FieldRefID,
	FieldPriority,
	FieldRetryTimes,
	FieldBody,
	FieldError,
	FieldScheduledAt,
	FieldFinishedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultQueueName holds the default value on creation for the "queue_name" field.
	DefaultQueueName string
	// DefaultRefID holds the default value on creation for the "ref_id" field.
	DefaultRefID func() string
	// DefaultPriority holds the default value on creation for the "priority" field.
	DefaultPriority uint
	// DefaultRetryTimes holds the default value on creation for the "retry_times" field.
	DefaultRetryTimes uint
	// DefaultScheduledAt holds the default value on creation for the "scheduled_at" field.
	DefaultScheduledAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusInit is the default value of the Status enum.
const DefaultStatus = StatusInit

// Status values.
const (
	StatusInit       Status = "Init"
	StatusProcessing Status = "Processing"
	StatusSuccessful Status = "Successful"
	StatusFailed     Status = "Failed"
	StatusWaitRetry  Status = "WaitRetry"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusInit, StatusProcessing, StatusSuccessful, StatusFailed, StatusWaitRetry:
		return nil
	default:
		return fmt.Errorf("job: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Job queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByQueueName orders the results by the queue_name field.
func ByQueueName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQueueName, opts...).ToFunc()
}

// ByRefID orders the results by the ref_id field.
func ByRefID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefID, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByRetryTimes orders the results by the retry_times field.
func ByRetryTimes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetryTimes, opts...).ToFunc()
}

// ByBody orders the results by the body field.
func ByBody(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBody, opts...).ToFunc()
}

// ByError orders the results by the error field.
func ByError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldError, opts...).ToFunc()
}

// ByScheduledAt orders the results by the scheduled_at field.
func ByScheduledAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheduledAt, opts...).ToFunc()
}

// ByFinishedAt orders the results by the finished_at field.
func ByFinishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishedAt, opts...).ToFunc()
}
