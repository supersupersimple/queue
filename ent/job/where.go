// Code generated by ent, DO NOT EDIT.

package job

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/supersupersimple/queue/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldUpdatedAt, v))
}

// QueueName applies equality check predicate on the "queue_name" field. It's identical to QueueNameEQ.
func QueueName(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldQueueName, v))
}

// RefID applies equality check predicate on the "ref_id" field. It's identical to RefIDEQ.
func RefID(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldRefID, v))
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v uint) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldPriority, v))
}

// RetryTimes applies equality check predicate on the "retry_times" field. It's identical to RetryTimesEQ.
func RetryTimes(v uint) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldRetryTimes, v))
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldBody, v))
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldError, v))
}

// ScheduledAt applies equality check predicate on the "scheduled_at" field. It's identical to ScheduledAtEQ.
func ScheduledAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldScheduledAt, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldFinishedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldStatus, vs...))
}

// QueueNameEQ applies the EQ predicate on the "queue_name" field.
func QueueNameEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldQueueName, v))
}

// QueueNameNEQ applies the NEQ predicate on the "queue_name" field.
func QueueNameNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldQueueName, v))
}

// QueueNameIn applies the In predicate on the "queue_name" field.
func QueueNameIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldQueueName, vs...))
}

// QueueNameNotIn applies the NotIn predicate on the "queue_name" field.
func QueueNameNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldQueueName, vs...))
}

// QueueNameGT applies the GT predicate on the "queue_name" field.
func QueueNameGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldQueueName, v))
}

// QueueNameGTE applies the GTE predicate on the "queue_name" field.
func QueueNameGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldQueueName, v))
}

// QueueNameLT applies the LT predicate on the "queue_name" field.
func QueueNameLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldQueueName, v))
}

// QueueNameLTE applies the LTE predicate on the "queue_name" field.
func QueueNameLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldQueueName, v))
}

// QueueNameContains applies the Contains predicate on the "queue_name" field.
func QueueNameContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldQueueName, v))
}

// QueueNameHasPrefix applies the HasPrefix predicate on the "queue_name" field.
func QueueNameHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldQueueName, v))
}

// QueueNameHasSuffix applies the HasSuffix predicate on the "queue_name" field.
func QueueNameHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldQueueName, v))
}

// QueueNameEqualFold applies the EqualFold predicate on the "queue_name" field.
func QueueNameEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldQueueName, v))
}

// QueueNameContainsFold applies the ContainsFold predicate on the "queue_name" field.
func QueueNameContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldQueueName, v))
}

// RefIDEQ applies the EQ predicate on the "ref_id" field.
func RefIDEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldRefID, v))
}

// RefIDNEQ applies the NEQ predicate on the "ref_id" field.
func RefIDNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldRefID, v))
}

// RefIDIn applies the In predicate on the "ref_id" field.
func RefIDIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldRefID, vs...))
}

// RefIDNotIn applies the NotIn predicate on the "ref_id" field.
func RefIDNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldRefID, vs...))
}

// RefIDGT applies the GT predicate on the "ref_id" field.
func RefIDGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldRefID, v))
}

// RefIDGTE applies the GTE predicate on the "ref_id" field.
func RefIDGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldRefID, v))
}

// RefIDLT applies the LT predicate on the "ref_id" field.
func RefIDLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldRefID, v))
}

// RefIDLTE applies the LTE predicate on the "ref_id" field.
func RefIDLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldRefID, v))
}

// RefIDContains applies the Contains predicate on the "ref_id" field.
func RefIDContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldRefID, v))
}

// RefIDHasPrefix applies the HasPrefix predicate on the "ref_id" field.
func RefIDHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldRefID, v))
}

// RefIDHasSuffix applies the HasSuffix predicate on the "ref_id" field.
func RefIDHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldRefID, v))
}

// RefIDEqualFold applies the EqualFold predicate on the "ref_id" field.
func RefIDEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldRefID, v))
}

// RefIDContainsFold applies the ContainsFold predicate on the "ref_id" field.
func RefIDContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldRefID, v))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v uint) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v uint) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...uint) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...uint) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldPriority, vs...))
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v uint) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldPriority, v))
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v uint) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldPriority, v))
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v uint) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldPriority, v))
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v uint) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldPriority, v))
}

// RetryTimesEQ applies the EQ predicate on the "retry_times" field.
func RetryTimesEQ(v uint) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldRetryTimes, v))
}

// RetryTimesNEQ applies the NEQ predicate on the "retry_times" field.
func RetryTimesNEQ(v uint) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldRetryTimes, v))
}

// RetryTimesIn applies the In predicate on the "retry_times" field.
func RetryTimesIn(vs ...uint) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldRetryTimes, vs...))
}

// RetryTimesNotIn applies the NotIn predicate on the "retry_times" field.
func RetryTimesNotIn(vs ...uint) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldRetryTimes, vs...))
}

// RetryTimesGT applies the GT predicate on the "retry_times" field.
func RetryTimesGT(v uint) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldRetryTimes, v))
}

// RetryTimesGTE applies the GTE predicate on the "retry_times" field.
func RetryTimesGTE(v uint) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldRetryTimes, v))
}

// RetryTimesLT applies the LT predicate on the "retry_times" field.
func RetryTimesLT(v uint) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldRetryTimes, v))
}

// RetryTimesLTE applies the LTE predicate on the "retry_times" field.
func RetryTimesLTE(v uint) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldRetryTimes, v))
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldBody, v))
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldBody, v))
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldBody, vs...))
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldBody, vs...))
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldBody, v))
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldBody, v))
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldBody, v))
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldBody, v))
}

// BodyContains applies the Contains predicate on the "body" field.
func BodyContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldBody, v))
}

// BodyHasPrefix applies the HasPrefix predicate on the "body" field.
func BodyHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldBody, v))
}

// BodyHasSuffix applies the HasSuffix predicate on the "body" field.
func BodyHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldBody, v))
}

// BodyIsNil applies the IsNil predicate on the "body" field.
func BodyIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldBody))
}

// BodyNotNil applies the NotNil predicate on the "body" field.
func BodyNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldBody))
}

// BodyEqualFold applies the EqualFold predicate on the "body" field.
func BodyEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldBody, v))
}

// BodyContainsFold applies the ContainsFold predicate on the "body" field.
func BodyContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldBody, v))
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldError, v))
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldError, v))
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldError, vs...))
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldError, vs...))
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldError, v))
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldError, v))
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldError, v))
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldError, v))
}

// ErrorContains applies the Contains predicate on the "error" field.
func ErrorContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldError, v))
}

// ErrorHasPrefix applies the HasPrefix predicate on the "error" field.
func ErrorHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldError, v))
}

// ErrorHasSuffix applies the HasSuffix predicate on the "error" field.
func ErrorHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldError, v))
}

// ErrorIsNil applies the IsNil predicate on the "error" field.
func ErrorIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldError))
}

// ErrorNotNil applies the NotNil predicate on the "error" field.
func ErrorNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldError))
}

// ErrorEqualFold applies the EqualFold predicate on the "error" field.
func ErrorEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldError, v))
}

// ErrorContainsFold applies the ContainsFold predicate on the "error" field.
func ErrorContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldError, v))
}

// ScheduledAtEQ applies the EQ predicate on the "scheduled_at" field.
func ScheduledAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldScheduledAt, v))
}

// ScheduledAtNEQ applies the NEQ predicate on the "scheduled_at" field.
func ScheduledAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldScheduledAt, v))
}

// ScheduledAtIn applies the In predicate on the "scheduled_at" field.
func ScheduledAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldScheduledAt, vs...))
}

// ScheduledAtNotIn applies the NotIn predicate on the "scheduled_at" field.
func ScheduledAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldScheduledAt, vs...))
}

// ScheduledAtGT applies the GT predicate on the "scheduled_at" field.
func ScheduledAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldScheduledAt, v))
}

// ScheduledAtGTE applies the GTE predicate on the "scheduled_at" field.
func ScheduledAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldScheduledAt, v))
}

// ScheduledAtLT applies the LT predicate on the "scheduled_at" field.
func ScheduledAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldScheduledAt, v))
}

// ScheduledAtLTE applies the LTE predicate on the "scheduled_at" field.
func ScheduledAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldScheduledAt, v))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldFinishedAt, v))
}

// FinishedAtIsNil applies the IsNil predicate on the "finished_at" field.
func FinishedAtIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldFinishedAt))
}

// FinishedAtNotNil applies the NotNil predicate on the "finished_at" field.
func FinishedAtNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldFinishedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Job) predicate.Job {
	return predicate.Job(sql.NotPredicates(p))
}
