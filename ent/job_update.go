// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/supersupersimple/queue/ent/job"
	"github.com/supersupersimple/queue/ent/predicate"
)

// JobUpdate is the builder for updating Job entities.
type JobUpdate struct {
	config
	hooks    []Hook
	mutation *JobMutation
}

// Where appends a list predicates to the JobUpdate builder.
func (ju *JobUpdate) Where(ps ...predicate.Job) *JobUpdate {
	ju.mutation.Where(ps...)
	return ju
}

// SetCreatedAt sets the "created_at" field.
func (ju *JobUpdate) SetCreatedAt(t time.Time) *JobUpdate {
	ju.mutation.SetCreatedAt(t)
	return ju
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ju *JobUpdate) SetNillableCreatedAt(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetCreatedAt(*t)
	}
	return ju
}

// SetUpdatedAt sets the "updated_at" field.
func (ju *JobUpdate) SetUpdatedAt(t time.Time) *JobUpdate {
	ju.mutation.SetUpdatedAt(t)
	return ju
}

// SetStatus sets the "status" field.
func (ju *JobUpdate) SetStatus(j job.Status) *JobUpdate {
	ju.mutation.SetStatus(j)
	return ju
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ju *JobUpdate) SetNillableStatus(j *job.Status) *JobUpdate {
	if j != nil {
		ju.SetStatus(*j)
	}
	return ju
}

// SetQueueName sets the "queue_name" field.
func (ju *JobUpdate) SetQueueName(s string) *JobUpdate {
	ju.mutation.SetQueueName(s)
	return ju
}

// SetNillableQueueName sets the "queue_name" field if the given value is not nil.
func (ju *JobUpdate) SetNillableQueueName(s *string) *JobUpdate {
	if s != nil {
		ju.SetQueueName(*s)
	}
	return ju
}

// SetRefID sets the "ref_id" field.
func (ju *JobUpdate) SetRefID(s string) *JobUpdate {
	ju.mutation.SetRefID(s)
	return ju
}

// SetNillableRefID sets the "ref_id" field if the given value is not nil.
func (ju *JobUpdate) SetNillableRefID(s *string) *JobUpdate {
	if s != nil {
		ju.SetRefID(*s)
	}
	return ju
}

// SetPriority sets the "priority" field.
func (ju *JobUpdate) SetPriority(u uint) *JobUpdate {
	ju.mutation.ResetPriority()
	ju.mutation.SetPriority(u)
	return ju
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ju *JobUpdate) SetNillablePriority(u *uint) *JobUpdate {
	if u != nil {
		ju.SetPriority(*u)
	}
	return ju
}

// AddPriority adds u to the "priority" field.
func (ju *JobUpdate) AddPriority(u int) *JobUpdate {
	ju.mutation.AddPriority(u)
	return ju
}

// SetRetryTimes sets the "retry_times" field.
func (ju *JobUpdate) SetRetryTimes(u uint) *JobUpdate {
	ju.mutation.ResetRetryTimes()
	ju.mutation.SetRetryTimes(u)
	return ju
}

// SetNillableRetryTimes sets the "retry_times" field if the given value is not nil.
func (ju *JobUpdate) SetNillableRetryTimes(u *uint) *JobUpdate {
	if u != nil {
		ju.SetRetryTimes(*u)
	}
	return ju
}

// AddRetryTimes adds u to the "retry_times" field.
func (ju *JobUpdate) AddRetryTimes(u int) *JobUpdate {
	ju.mutation.AddRetryTimes(u)
	return ju
}

// SetBody sets the "body" field.
func (ju *JobUpdate) SetBody(s string) *JobUpdate {
	ju.mutation.SetBody(s)
	return ju
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (ju *JobUpdate) SetNillableBody(s *string) *JobUpdate {
	if s != nil {
		ju.SetBody(*s)
	}
	return ju
}

// ClearBody clears the value of the "body" field.
func (ju *JobUpdate) ClearBody() *JobUpdate {
	ju.mutation.ClearBody()
	return ju
}

// SetError sets the "error" field.
func (ju *JobUpdate) SetError(s string) *JobUpdate {
	ju.mutation.SetError(s)
	return ju
}

// SetNillableError sets the "error" field if the given value is not nil.
func (ju *JobUpdate) SetNillableError(s *string) *JobUpdate {
	if s != nil {
		ju.SetError(*s)
	}
	return ju
}

// ClearError clears the value of the "error" field.
func (ju *JobUpdate) ClearError() *JobUpdate {
	ju.mutation.ClearError()
	return ju
}

// SetScheduledAt sets the "scheduled_at" field.
func (ju *JobUpdate) SetScheduledAt(t time.Time) *JobUpdate {
	ju.mutation.SetScheduledAt(t)
	return ju
}

// SetNillableScheduledAt sets the "scheduled_at" field if the given value is not nil.
func (ju *JobUpdate) SetNillableScheduledAt(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetScheduledAt(*t)
	}
	return ju
}

// SetFinishedAt sets the "finished_at" field.
func (ju *JobUpdate) SetFinishedAt(t time.Time) *JobUpdate {
	ju.mutation.SetFinishedAt(t)
	return ju
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (ju *JobUpdate) SetNillableFinishedAt(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetFinishedAt(*t)
	}
	return ju
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (ju *JobUpdate) ClearFinishedAt() *JobUpdate {
	ju.mutation.ClearFinishedAt()
	return ju
}

// Mutation returns the JobMutation object of the builder.
func (ju *JobUpdate) Mutation() *JobMutation {
	return ju.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ju *JobUpdate) Save(ctx context.Context) (int, error) {
	ju.defaults()
	return withHooks(ctx, ju.sqlSave, ju.mutation, ju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JobUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JobUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JobUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ju *JobUpdate) defaults() {
	if _, ok := ju.mutation.UpdatedAt(); !ok {
		v := job.UpdateDefaultUpdatedAt()
		ju.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ju *JobUpdate) check() error {
	if v, ok := ju.mutation.Status(); ok {
		if err := job.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Job.status": %w`, err)}
		}
	}
	return nil
}

func (ju *JobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ju.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeUint64))
	if ps := ju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.CreatedAt(); ok {
		_spec.SetField(job.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ju.mutation.UpdatedAt(); ok {
		_spec.SetField(job.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ju.mutation.Status(); ok {
		_spec.SetField(job.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ju.mutation.QueueName(); ok {
		_spec.SetField(job.FieldQueueName, field.TypeString, value)
	}
	if value, ok := ju.mutation.RefID(); ok {
		_spec.SetField(job.FieldRefID, field.TypeString, value)
	}
	if value, ok := ju.mutation.Priority(); ok {
		_spec.SetField(job.FieldPriority, field.TypeUint, value)
	}
	if value, ok := ju.mutation.AddedPriority(); ok {
		_spec.AddField(job.FieldPriority, field.TypeUint, value)
	}
	if value, ok := ju.mutation.RetryTimes(); ok {
		_spec.SetField(job.FieldRetryTimes, field.TypeUint, value)
	}
	if value, ok := ju.mutation.AddedRetryTimes(); ok {
		_spec.AddField(job.FieldRetryTimes, field.TypeUint, value)
	}
	if value, ok := ju.mutation.Body(); ok {
		_spec.SetField(job.FieldBody, field.TypeString, value)
	}
	if ju.mutation.BodyCleared() {
		_spec.ClearField(job.FieldBody, field.TypeString)
	}
	if value, ok := ju.mutation.Error(); ok {
		_spec.SetField(job.FieldError, field.TypeString, value)
	}
	if ju.mutation.ErrorCleared() {
		_spec.ClearField(job.FieldError, field.TypeString)
	}
	if value, ok := ju.mutation.ScheduledAt(); ok {
		_spec.SetField(job.FieldScheduledAt, field.TypeTime, value)
	}
	if value, ok := ju.mutation.FinishedAt(); ok {
		_spec.SetField(job.FieldFinishedAt, field.TypeTime, value)
	}
	if ju.mutation.FinishedAtCleared() {
		_spec.ClearField(job.FieldFinishedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ju.mutation.done = true
	return n, nil
}

// JobUpdateOne is the builder for updating a single Job entity.
type JobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobMutation
}

// SetCreatedAt sets the "created_at" field.
func (juo *JobUpdateOne) SetCreatedAt(t time.Time) *JobUpdateOne {
	juo.mutation.SetCreatedAt(t)
	return juo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableCreatedAt(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetCreatedAt(*t)
	}
	return juo
}

// SetUpdatedAt sets the "updated_at" field.
func (juo *JobUpdateOne) SetUpdatedAt(t time.Time) *JobUpdateOne {
	juo.mutation.SetUpdatedAt(t)
	return juo
}

// SetStatus sets the "status" field.
func (juo *JobUpdateOne) SetStatus(j job.Status) *JobUpdateOne {
	juo.mutation.SetStatus(j)
	return juo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableStatus(j *job.Status) *JobUpdateOne {
	if j != nil {
		juo.SetStatus(*j)
	}
	return juo
}

// SetQueueName sets the "queue_name" field.
func (juo *JobUpdateOne) SetQueueName(s string) *JobUpdateOne {
	juo.mutation.SetQueueName(s)
	return juo
}

// SetNillableQueueName sets the "queue_name" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableQueueName(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetQueueName(*s)
	}
	return juo
}

// SetRefID sets the "ref_id" field.
func (juo *JobUpdateOne) SetRefID(s string) *JobUpdateOne {
	juo.mutation.SetRefID(s)
	return juo
}

// SetNillableRefID sets the "ref_id" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableRefID(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetRefID(*s)
	}
	return juo
}

// SetPriority sets the "priority" field.
func (juo *JobUpdateOne) SetPriority(u uint) *JobUpdateOne {
	juo.mutation.ResetPriority()
	juo.mutation.SetPriority(u)
	return juo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillablePriority(u *uint) *JobUpdateOne {
	if u != nil {
		juo.SetPriority(*u)
	}
	return juo
}

// AddPriority adds u to the "priority" field.
func (juo *JobUpdateOne) AddPriority(u int) *JobUpdateOne {
	juo.mutation.AddPriority(u)
	return juo
}

// SetRetryTimes sets the "retry_times" field.
func (juo *JobUpdateOne) SetRetryTimes(u uint) *JobUpdateOne {
	juo.mutation.ResetRetryTimes()
	juo.mutation.SetRetryTimes(u)
	return juo
}

// SetNillableRetryTimes sets the "retry_times" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableRetryTimes(u *uint) *JobUpdateOne {
	if u != nil {
		juo.SetRetryTimes(*u)
	}
	return juo
}

// AddRetryTimes adds u to the "retry_times" field.
func (juo *JobUpdateOne) AddRetryTimes(u int) *JobUpdateOne {
	juo.mutation.AddRetryTimes(u)
	return juo
}

// SetBody sets the "body" field.
func (juo *JobUpdateOne) SetBody(s string) *JobUpdateOne {
	juo.mutation.SetBody(s)
	return juo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableBody(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetBody(*s)
	}
	return juo
}

// ClearBody clears the value of the "body" field.
func (juo *JobUpdateOne) ClearBody() *JobUpdateOne {
	juo.mutation.ClearBody()
	return juo
}

// SetError sets the "error" field.
func (juo *JobUpdateOne) SetError(s string) *JobUpdateOne {
	juo.mutation.SetError(s)
	return juo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableError(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetError(*s)
	}
	return juo
}

// ClearError clears the value of the "error" field.
func (juo *JobUpdateOne) ClearError() *JobUpdateOne {
	juo.mutation.ClearError()
	return juo
}

// SetScheduledAt sets the "scheduled_at" field.
func (juo *JobUpdateOne) SetScheduledAt(t time.Time) *JobUpdateOne {
	juo.mutation.SetScheduledAt(t)
	return juo
}

// SetNillableScheduledAt sets the "scheduled_at" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableScheduledAt(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetScheduledAt(*t)
	}
	return juo
}

// SetFinishedAt sets the "finished_at" field.
func (juo *JobUpdateOne) SetFinishedAt(t time.Time) *JobUpdateOne {
	juo.mutation.SetFinishedAt(t)
	return juo
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableFinishedAt(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetFinishedAt(*t)
	}
	return juo
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (juo *JobUpdateOne) ClearFinishedAt() *JobUpdateOne {
	juo.mutation.ClearFinishedAt()
	return juo
}

// Mutation returns the JobMutation object of the builder.
func (juo *JobUpdateOne) Mutation() *JobMutation {
	return juo.mutation
}

// Where appends a list predicates to the JobUpdate builder.
func (juo *JobUpdateOne) Where(ps ...predicate.Job) *JobUpdateOne {
	juo.mutation.Where(ps...)
	return juo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (juo *JobUpdateOne) Select(field string, fields ...string) *JobUpdateOne {
	juo.fields = append([]string{field}, fields...)
	return juo
}

// Save executes the query and returns the updated Job entity.
func (juo *JobUpdateOne) Save(ctx context.Context) (*Job, error) {
	juo.defaults()
	return withHooks(ctx, juo.sqlSave, juo.mutation, juo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JobUpdateOne) SaveX(ctx context.Context) *Job {
	node, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (juo *JobUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JobUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (juo *JobUpdateOne) defaults() {
	if _, ok := juo.mutation.UpdatedAt(); !ok {
		v := job.UpdateDefaultUpdatedAt()
		juo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (juo *JobUpdateOne) check() error {
	if v, ok := juo.mutation.Status(); ok {
		if err := job.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Job.status": %w`, err)}
		}
	}
	return nil
}

func (juo *JobUpdateOne) sqlSave(ctx context.Context) (_node *Job, err error) {
	if err := juo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeUint64))
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Job.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := juo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, job.FieldID)
		for _, f := range fields {
			if !job.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != job.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := juo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := juo.mutation.CreatedAt(); ok {
		_spec.SetField(job.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := juo.mutation.UpdatedAt(); ok {
		_spec.SetField(job.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := juo.mutation.Status(); ok {
		_spec.SetField(job.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := juo.mutation.QueueName(); ok {
		_spec.SetField(job.FieldQueueName, field.TypeString, value)
	}
	if value, ok := juo.mutation.RefID(); ok {
		_spec.SetField(job.FieldRefID, field.TypeString, value)
	}
	if value, ok := juo.mutation.Priority(); ok {
		_spec.SetField(job.FieldPriority, field.TypeUint, value)
	}
	if value, ok := juo.mutation.AddedPriority(); ok {
		_spec.AddField(job.FieldPriority, field.TypeUint, value)
	}
	if value, ok := juo.mutation.RetryTimes(); ok {
		_spec.SetField(job.FieldRetryTimes, field.TypeUint, value)
	}
	if value, ok := juo.mutation.AddedRetryTimes(); ok {
		_spec.AddField(job.FieldRetryTimes, field.TypeUint, value)
	}
	if value, ok := juo.mutation.Body(); ok {
		_spec.SetField(job.FieldBody, field.TypeString, value)
	}
	if juo.mutation.BodyCleared() {
		_spec.ClearField(job.FieldBody, field.TypeString)
	}
	if value, ok := juo.mutation.Error(); ok {
		_spec.SetField(job.FieldError, field.TypeString, value)
	}
	if juo.mutation.ErrorCleared() {
		_spec.ClearField(job.FieldError, field.TypeString)
	}
	if value, ok := juo.mutation.ScheduledAt(); ok {
		_spec.SetField(job.FieldScheduledAt, field.TypeTime, value)
	}
	if value, ok := juo.mutation.FinishedAt(); ok {
		_spec.SetField(job.FieldFinishedAt, field.TypeTime, value)
	}
	if juo.mutation.FinishedAtCleared() {
		_spec.ClearField(job.FieldFinishedAt, field.TypeTime)
	}
	_node = &Job{config: juo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	juo.mutation.done = true
	return _node, nil
}
